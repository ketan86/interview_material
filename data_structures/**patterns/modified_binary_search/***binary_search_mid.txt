The simple answer is, the addition l + u can overflow,
and has undefined behavior in some languages, as described
in a blog post by Joshua Bloch, about a bug in the Java library
for the implementation of binary search.

Some readers may not understand what it is about:

l + (u - l) / 2
Note that in some code, the variable names are different, and it is

low + (high - low) / 2
The answer is: let's say if you have two numbers: 200 and 210,
and now you want the "middle number". And let's say if you add
any two numbers and the result is greater than 255, then it can
overflow and the behavior is undefined, then what can you do? A
simple way is just to add the difference between them, but just
half of it, to the smaller value: look at what the difference is
between 200 and 210. It is 10. (You can consider it the "difference"
or "length", between them). So you just need to add 10 / 2 = 5 to 200,
and get 205. You don't need to add 200 and 210 together first --
and that's how we can reach the calculation: (u - l) is the difference.
(u - l) / 2 is half of it. Add that to l and we have l + (u - l) / 2.

for ex, to find mid between 2 to 6, we find the difference (6-2) = 4 so
if we add 4/2 to 2 = (2+2) = 4, we found the middle without the overflow.