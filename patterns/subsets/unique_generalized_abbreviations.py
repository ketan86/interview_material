"""
Given a word, write a function to generate all of its unique generalized
abbreviations.

Generalized abbreviation of a word can be generated by replacing each
substring of the word by the count of characters in the substring. 
Take the example of “ab” which has four substrings: “”, “a”, “b”, and
“ab”. After replacing these substrings in the actual word by the count of
characters we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.

Example 1:

Input: "BAT"
Output: ["BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"]
Example 2:

Input: "code"
Output: ["code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode",
"1od1", "1o1e", "1o2", "2de", "2d1", "3e", "4"]

                        BAT
                /        |         \
            1AT         B1T         BA1
            ^            ^            ^
         /     \      /
       11T     1A1   B11
        ^        ^     ^
      /
    111
      ^

    1st, replace each index with 1 at each level
        [BAT, 1AT, B1T, BA1, 11T, 1A1, B11, 111]
    2nd, sum up the digits occuring together.
        [BAT, 1AT, B1T, BA1, 2T, 1A1, B2, 3]
"""
# pylint: skip-file
from collections import deque


# recursive
def generate_generalized_abbreviation(word):
    result = [word]
    _traverse(word, 0, result)
    return result


def _traverse(s, start_index, result):
    if start_index == len(s):
        return
    else:
        for i in range(start_index, len(s)):
            new_s = _transform(s, i)
            result.append(_combine(new_s))
            _traverse(new_s, i + 1, result)


def _transform(s, index):
    new_str = ''
    for i, char in enumerate(s):
        if i == index:
            new_str += str(1)
        else:
            new_str += char
    return new_str


def _combine(s):
    transformed_str = ''
    d = 0
    for char in s:
        if char.isdigit():
            d += int(char)
        else:
            if d != 0:
                transformed_str += str(d)
                d = 0
            transformed_str += char
    if d != 0:
        transformed_str += str(d)

    return transformed_str


def generate_generalized_abbreviation_iter(word):
    result = [word]
    queue = deque()
    queue.append((word, 0))
    while queue:
        # pull item out of the queue and iterage from the index to end of the
        item, start_index = queue.popleft()
        for i in range(start_index, len(word)):
            new_s = _transform(item, i)
            result.append(_combine(new_s))
            queue.append((new_s, i + 1))
    return result


def main():
    print("Generalized abbreviation are: " +
          str(generate_generalized_abbreviation("BAT")))
    print("Generalized abbreviation are: " +
          str(generate_generalized_abbreviation("code")))

    print("\nGeneralized abbreviation are: iterative " +
          str(generate_generalized_abbreviation_iter("BAT")))
    print("Generalized abbreviation are: iterative " +
          str(generate_generalized_abbreviation_iter("code")))


main()
